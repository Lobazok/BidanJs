const colors = require("colors/safe")
colors.setTheme({
    error: ["red", "italic", "bold"],
    warn: "red",
    LyInput: "blue",
    LyInputTitle: ["blue", "bold"],
    Ly: "cyan",
    LyTitle: ["cyan", "bold"],
    LyOutput: "green",
    LyTitleOutput: ["green", "bold"],
})

function Neurons(){
}

function logError(error){
    console.log(colors.error(error))
}

function Neuralnetwork() {
    this.LayerInput = []
    this.Layer = []
    this.LayerOutput = []

    //funcion para configurar las capas de entrada
    this.LayerInputConfig = (Input) => {
        //comprobamos si Input es un numero
        if (typeof Input == "number") {
            //Input es un numero
            //agregamos las neuronas a LayerInput
            for (let index = 0; index < Input; index++) {
                this.LayerInput.push(new Neurons())
            }
        } else {
            //Input no es un numero
            logError("Bidan error 001: el valor de LayerInputConfig no es un numero")
        }
    }

    //funcion para configurar las capas
    this.LayersConfig = (ArrayInput) => {
        //comprobamos si Input es un numero
        if (typeof ArrayInput == "object") {
            //Input es un numero
            //agregamos las neuronas a LayerInput
            for (let index = 0; index < ArrayInput.length; index++) {
                let layer = []
                for (let o = 0; o < ArrayInput[index]; o++) {
                    layer.push(new Neurons())
                }
                this.Layer.push(layer)
            }
        }else if(typeof ArrayInput == "number"){
            let layer = []
            for (let o = 0; o < ArrayInput; o++) {
                layer.push(new Neurons())
            }
            this.Layer.push(layer)
        }else {
            //Input no es un numero
            logError("Bidan error 001: el valor de NewLayers no es un array")
        }
    }

    //funcion para configurar las capas de salida
    this.LayerOutputConfig = (Output) => {
        //comprobamos si Input es un numero
        if (typeof Output == "number") {
            //Input es un numero
            //agregamos las neuronas a LayerInput
            for (let index = 0; index < Output; index++) {
                this.LayerOutput.push(new Neurons())
            }
        } else {
            //Input no es un numero
            logError("Bidan error 001: el valor de LayerOutputConfig no es un numero")
        }
    }

    //funcion para obtener informacion de la red nueronal
    this.info = ()=>{
        if(this.LayerInput.length != 0){
			console.log(colors.LyInputTitle("Number of neurons in the input layer: " + this.LayerInput.length))
		}else{
			console.log(colors.warn("Bidan error 000: error de configuracion en capa de entrada"))
		}

		if(this.Layer.length != 0){
			console.log(colors.LyTitle("Number of hidden Layers: " + this.Layer.length))
			for (let index = 0; index < this.Layer.length; index++) {
				console.log(colors.Ly(" Number of neurons in the layer " + index + ": " + this.Layer[index].length))
			}
		}else{
			console.log(colors.warn("Bidan error 000: error de configuracion de capas ocultas"))
		}	

        if(this.LayerOutput.length != 0){
			console.log(colors.LyTitleOutput("Number of neurons in the output layer: " + this.LayerOutput.length))
		}else{
			console.log(colors.warn("Bidan error 000: error de configuracion en capa de salida"))
		}
    }

    //funcion para configurar la red neuronal, llama a todas las funciones anteriores
    this.init = (LayerInputConfig,LayersConfig,LayerOutputConfig)=>{
        this.LayerInputConfig(LayerInputConfig)
        this.LayersConfig(LayersConfig)
        this.LayerOutputConfig(LayerOutputConfig)
    }
}

module.exports = {
    Neuralnetwork
}
